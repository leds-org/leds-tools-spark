name: Code Wise

on:
    pull_request:  # Executa apenas quando há um Pull Request
      branches:
        - developing  # Define a branch 'developing'

permissions: write-all

jobs:
  suggest-improvements:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get install jq
          pip install requests
          pip install agentops  
      
      - name: Run AgentOps Monitoring
        env:
            AGENTOPS_API_KEY: ${{ secrets.AGENTOPS_API_KEY }}
        run: |
            python -c "
            import os
            import agentops
            api_key = os.getenv('AGENTOPS_API_KEY')
            agentops.init(str(api_key))
            "

      - name: Get committer's name
        id: get-committer
        run: |
          COMMITTER_NAME=$(git log -1 --pretty=format:'%an')
          echo "COMMITTER_NAME=$COMMITTER_NAME" >> $GITHUB_ENV

      - name: Check for code files and send to GPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Check if it's the first commit in the repository
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            # First commit: compare with the empty tree
            FILES=$(git diff --name-only 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD | grep -E '\.(py|js|ts|java|c|cpp|go|rb|php|cs)$')
          else
            # Subsequent commits: compare with the previous commit (HEAD^)
            FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.(py|js|ts|java|c|cpp|go|rb|php|cs)$')
          fi

          # Check if there are any code files
          if [ -n "$FILES" ]; then
            for FILE in $FILES; do
              echo "Analyzing the file: $FILE"
              CONTENT=$(cat "$FILE")

              # Print the content being sent for analysis
              #echo "Content sent for analysis: "
              #echo "$CONTENT"

              # Determine the language based on the file extension
              case "$FILE" in
                *.py) LANG="python" ;;
                *.js) LANG="javascript" ;;
                *.ts) LANG="typescript" ;;
                *.java) LANG="java" ;;
                *.c) LANG="c" ;;
                *.cpp) LANG="cpp" ;;
                *.go) LANG="go" ;;
                *.rb) LANG="ruby" ;;
                *.php) LANG="php" ;;
                *.cs) LANG="csharp" ;;
                *) LANG="plaintext" ;;  # Default for unknown file types
              esac

              REQUEST="Analyze the following '$LANG' code for performance improvements, code smells and give example how to fix. Limit your feedback to 2000 characteres of concise suggestions and group the sugestions in named performance problem/code smell categories. If possibel named the categories with perfomed and code smell name:\n\n$CONTENT"

              # Create valid JSON payload using jq to escape variables correctly
              JSON_PAYLOAD=$(jq -n --arg model "gpt-4o-mini" \
                      --arg system_message "You are a code analysis assistant focused on performance and code quality." \
                      --arg user_message "$REQUEST" \
                      '{
                        "model": $model,
                        "messages": [
                          {"role": "system", "content": $system_message},
                          {"role": "user", "content": $user_message}
                        ],
                        "max_tokens": 300
                      }')

                    # Print the JSON payload to verify correct formatting
                    echo "JSON Payload:"
                    echo "$JSON_PAYLOAD"

              # Send the file content to the GPT API for performance and code smells analysis
                RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
                -d "$JSON_PAYLOAD")


              echo "Response from GPT API:"
              echo "$RESPONSE"

              SUGGESTIONS=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
              ALL_SUGGESTIONS+="$FILE:\n$SUGGESTIONS\n\n"

              # Print the response from the GPT API
              echo "Response from GPT API:"
              echo "$SUGGESTIONS"

              # Prepare the message for Discord (escaping necessary characters)
              DISCORD_MESSAGE=$(jq -n \
                    --arg file "$FILE" \
                    --arg committer "$(git log -1 --pretty=format:'%an')" \
                    --arg suggestions "$SUGGESTIONS" \
                    '{
                    content: "Code suggestions for: \($file)\nCommitter: \($committer)\nSuggestions (Performance, Code Smells):\n``` \($suggestions) ```"
                    }')

              # Send the message to Discord webhook
                curl -s -H "Content-Type: application/json" \
                -d "$DISCORD_MESSAGE" \
                "$DISCORD_WEBHOOK_URL"

              # Save suggestions to an environment variable for the next step
                echo "ALL_SUGGESTIONS<<EOF" >> $GITHUB_ENV
                echo -e "$ALL_SUGGESTIONS" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV

            done
          else
            echo "No code files found."
          fi

      - name: Comment on Pull Request
        env:
          SUGGESTIONS: ${{ env.SUGGESTIONS }}  # Carregar as sugestões do ambiente
        run: |

          ESCAPED_SUGGESTIONS=$(echo "$ALL_SUGGESTIONS" | jq -Rsa .)

          curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/issues/${{github.event.pull_request.number}}/comments" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "{\"body\": ${ESCAPED_SUGGESTIONS}}"

      - name: Stop AgentOps Monitoring
        run: |
          python -c "import agentops; agentops.end_session('Success')"
